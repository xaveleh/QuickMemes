{"version":3,"sources":["MemeContext.js","sharebuttons.js","urloutput.js","memeselect.js","memetext.js","MemeEditor.js","Memes.js","App.js","index.js"],"names":["MemeContext","React","createContext","ShareButtonsSection","styled","div","ShareButtons","url","RedditShareButton","RedditIcon","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","TumblrShareButton","TumblrIcon","EmailShareButton","EmailIcon","UrlOutputSpan","span","UrlOutput","MemeSelector","select","mapOption","currentMeme","memeId","value","key","name","MemeSelect","useContext","dispatch","memesMap","onChange","evt","memeUrl","textArray","target","inputs","_","fill","Array","box_count","map","MemeTextInput","label","MemeText","index","handleChange","useCallback","slice","placeholder","type","MemeCanvas","img","MemeSubmit","input","Toolbar","form","formatMemeArray","text","MemeEditor","useEffect","some","MemeTemplatePath","array","join","fetch","method","headers","then","response","json","data","console","log","memeMetaData","get","inputArray","i","push","onSubmit","preventDefault","submittedText","reduce","acc","src","alt","StyledDiv","main","getMemesPath","reduceMemesArray","memeMap","nextMemeMap","id","initialState","reducer","state","action","Memes","children","useReducer","size","memeArray","memes","catch","error","Provider","App","StrictMode","MOUNT_NODE","document","getElementById","render","createElement"],"mappings":"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","file":"static/js/main.1fe62f6e.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport const MemeContext = React.createContext();","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n    FacebookShareButton,\r\n    TwitterShareButton,\r\n    RedditShareButton,\r\n    TumblrShareButton,\r\n    EmailShareButton,\r\n    FacebookIcon,\r\n    TwitterIcon,\r\n    RedditIcon,\r\n    TumblrIcon,\r\n    EmailIcon\r\n  } from 'react-share';\r\n\r\nconst ShareButtonsSection = styled.div`\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n`;\r\n\r\nfunction ShareButtons({ url }) {\r\n    return (\r\n        <ShareButtonsSection>\r\n            <RedditShareButton url={url}><RedditIcon/></RedditShareButton>\r\n            <FacebookShareButton url={url}><FacebookIcon/></FacebookShareButton>\r\n            <TwitterShareButton url={url}><TwitterIcon/></TwitterShareButton>\r\n            <TumblrShareButton url={url}><TumblrIcon/></TumblrShareButton>\r\n            <EmailShareButton url={url}><EmailIcon/></EmailShareButton>\r\n        </ShareButtonsSection>\r\n    );\r\n}\r\nexport default ShareButtons","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst UrlOutputSpan = styled.span`\r\nbackground: rgba(131, 126, 127, 0.5);\r\nborder: 1px solid black;\r\nfont-family: georgia;\r\n`;\r\n\r\n\r\nfunction UrlOutput ({url}) {\r\n    return <UrlOutputSpan url={url}>{url || \"Your shareable meme URL will appear here!\"}</UrlOutputSpan>\r\n}\r\n\r\nexport default UrlOutput;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport _ from 'lodash';\r\nimport { MemeContext } from './MemeContext';\r\n\r\nconst MemeSelector = styled.select`\r\n    max-width: 300px;\r\n    font-family: georgia;\r\n    max-height: 20px;\r\n`;\r\n\r\nfunction mapOption(currentMeme, memeId) {\r\n    return <option value = {memeId} key={memeId}>{currentMeme.name}</option>;\r\n}\r\n\r\nfunction MemeSelect() {\r\n    const { dispatch, memesMap } = React.useContext(MemeContext);\r\n    return (\r\n        <MemeSelector\r\n            onChange = {(evt) => {\r\n                dispatch({\r\n                    memeUrl: '',\r\n                    textArray: [], \r\n                    memeId: evt.target.value, \r\n                    inputs: _.fill(Array(memesMap[evt.target.value].box_count), '')\r\n                });\r\n            }}\r\n        >\r\n            <option>*Pick A Meme*</option>\r\n            {_.map(memesMap, mapOption)}\r\n        </MemeSelector>\r\n    );\r\n}\r\n\r\nexport default MemeSelect;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { MemeContext } from './MemeContext';\r\n\r\nconst MemeTextInput = styled.label`\r\n    display: block;\r\n    margin: 0.5em;\r\n`;\r\n\r\nfunction MemeText({ index }) {\r\n    const { dispatch, inputs } = React.useContext(MemeContext);\r\n    const handleChange = React.useCallback((evt) => {\r\n        dispatch({ inputs: [...inputs.slice(0, index), evt.target.value, ...inputs.slice(index + 1)]})\r\n    }, [index, dispatch, inputs]);\r\n    return (\r\n        <MemeTextInput>\r\n            <input placeholder={`Text box ${index + 1}`} type=\"text\" onChange={handleChange} value={inputs[index]} />\r\n        </MemeTextInput>\r\n    );\r\n}\r\n\r\nexport default MemeText;","import React, {Fragment} from 'react';\r\nimport {MemeContext} from \"./MemeContext\";\r\nimport _ from \"lodash\";\r\nimport styled from \"styled-components\";\r\nimport ShareButtons from './sharebuttons';\r\nimport UrlOutput from  './urloutput';\r\nimport MemeSelect from './memeselect';\r\nimport MemeText from './memetext';\r\n\r\nconst MemeCanvas = styled.img`\r\nobject-fit: contain;\r\nwidth: 50vw;\r\nheight: 60vh;\r\ntext-align: center;\r\npadding: 1em;\r\nbox-sizing: border-box;\r\nwidth: 100%\r\nimage-border: solid 1px black;\r\nfont-family: georgia;\r\n`;\r\n\r\nconst MemeSubmit = styled.input`\r\nfont-family: georgia;\r\nborder: solid 1px black;\r\n`;\r\n\r\nconst Toolbar = styled.form`\r\nbackground: rgba(13, 8, 59, 0.75);\r\n`;\r\n\r\nfunction makeMemeQuery(array) {\r\n    return _.map(array, formatMemeArray).join('&');\r\n}\r\n\r\nfunction formatMemeArray(value, index) {\r\n    return `boxes[${index}][text]=${value.text}`\r\n}\r\n\r\nfunction MemeEditor() {\r\n    const {memeId, memesMap, memeUrl, dispatch, textArray, inputs} = React.useContext(MemeContext);\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        const submittedText = _.reduce(inputs, (acc, value) => {\r\n            acc.push({ text: value });\r\n            return acc;\r\n        }, []);\r\n        dispatch({ textArray: [...submittedText] });\r\n    };\r\n\r\n\r\n    React.useEffect(() => {\r\n        if(textArray.some(value => !!value)) {\r\n            const MemeTemplatePath = `https://api.imgflip.com/caption_image?template_id=${memeId}&${makeMemeQuery(textArray)}&username=IvyDoyle&password=mypassword`;\r\n            fetch(MemeTemplatePath, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                } \r\n            }).then((response) => {\r\n                return response.json();\r\n            }).then((json) => {\r\n                dispatch({ memeUrl: json.data.url });\r\n                console.log('response for memeeditor', json);\r\n            })\r\n        }\r\n    }, [memeId, textArray, dispatch]);\r\n    const memeMetaData = _.get(memesMap, memeId, {\"box_count\": 0, \"memeId\": \"\"})\r\n    const inputArray = [];\r\n    for (let i = 0; i < memeMetaData.box_count; i++) {\r\n        inputArray.push(<MemeText key={i} index={i} />);\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Toolbar onSubmit={handleSubmit}>\r\n                <MemeSelect />\r\n                {inputArray}\r\n                <MemeSubmit type=\"submit\" value=\"Submit\"/>\r\n            </Toolbar>\r\n            <MemeCanvas src={memeUrl || memeMetaData.url} alt=\"Edited meme goes here!\"/>\r\n            <UrlOutput url={memeUrl} />\r\n            <ShareButtons url={memeUrl} />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default MemeEditor;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport {MemeContext} from \"./MemeContext\"\r\nimport MemeEditor from './MemeEditor';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDiv = styled.main`\r\n    font-family: georgia;\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    background: rgba(57, 50, 118, 0.5);\r\n    text-align: center;\r\n    height: 100%;\r\n    grid-row-gap: 1em;\r\n`;\r\n\r\nconst getMemesPath = 'https://api.imgflip.com/get_memes';\r\n\r\nfunction reduceMemesArray(memeMap, currentMeme) {\r\n    const nextMemeMap = memeMap;\r\n    const memeId = currentMeme.id;\r\n    nextMemeMap[memeId] = currentMeme;\r\n    return nextMemeMap;\r\n}\r\n\r\nconst initialState = {\r\n    memesMap: {},\r\n    memeId: -1,\r\n    memeUrl: '',\r\n    textArray: [],\r\n    inputs: [],\r\n}\r\n\r\nfunction reducer(state, action) {\r\n    return { ...state, ...action };\r\n}\r\n\r\nfunction Memes({ children }) {\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n    const {memesMap} = state;\r\n    React.useEffect(() => {\r\n        if(_.size(memesMap) === 0) {\r\n            console.log('true')\r\n            fetch(getMemesPath, {\r\n                method: 'GET'\r\n            }).then((response) => {\r\n                return response.json();\r\n            }).then((json) => {\r\n                console.log('Response', json);\r\n                const memeArray = json.data.memes;\r\n                dispatch({\r\n                    memesMap: {...memeArray.reduce(reduceMemesArray, memesMap)},\r\n                });\r\n            }).catch((error) => {\r\n                console.log('Caught error getting memes', error);\r\n            });\r\n        }\r\n    }, [memesMap]);\r\n    console.log('render', state)\r\n    return (\r\n        <StyledDiv> \r\n            <MemeContext.Provider value={{...state, dispatch}}>\r\n                <MemeEditor />\r\n            </MemeContext.Provider>\r\n        </StyledDiv>\r\n    );\r\n    }\r\n\r\n\r\n\r\nexport default Memes;\r\n","import React from 'react';\r\nimport Memes from './Memes';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <React.StrictMode>\r\n            <header />\r\n            <Memes />\r\n            <footer />\r\n        </React.StrictMode>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { createElement } from 'react';\r\nimport { render } from 'react-dom'\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nconst MOUNT_NODE = document.getElementById('root');\r\n(function() {\r\n  render(createElement(App), MOUNT_NODE);\r\n})();\r\n"],"sourceRoot":""}